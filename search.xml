<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>从数组给cv::Mat 赋值的坑</title>
      <link href="/2023/09/12/opencv%E7%9A%84cv_mat%E7%9A%84%E5%9D%91/"/>
      <url>/2023/09/12/opencv%E7%9A%84cv_mat%E7%9A%84%E5%9D%91/</url>
      
        <content type="html"><![CDATA[<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">## 从数组给cv::Mat 赋值的坑</span><br><span class="line"></span><br><span class="line">最近做一个项目，需要在一个类里对一个cv::Mat的对象进行初始化。</span><br><span class="line"></span><br><span class="line">于是写了一个init函数，如下：</span><br><span class="line">```C</span><br><span class="line">void KalmanFilter1::init(cv::Rect &amp;realRectBox) &#123;</span><br><span class="line">//initial kalman filter</span><br><span class="line">this-&gt;kalmanFilter = cv::KalmanFilter(4, 2, 0,CV_32F);</span><br><span class="line"></span><br><span class="line">//</span><br><span class="line">float fltTransitionMatrixValues[4][4] = &#123;</span><br><span class="line">&#123;1,0,1,0&#125;,</span><br><span class="line">&#123;0,1,0,1&#125;,</span><br><span class="line">&#123;0,0,1,0&#125;,</span><br><span class="line">&#123;0,0,0,1&#125; &#125;;</span><br><span class="line">        //set Transition Matrix</span><br><span class="line">kalmanFilter.transitionMatrix = cv::Mat(4, 4, CV_32F, fltTransitionMatrixValues); </span><br><span class="line">        ...</span><br><span class="line">&#125;</span><br><span class="line">```</span><br><span class="line"></span><br><span class="line">然后又在其他地方输出kalmanFilter.transitionMatrix，</span><br><span class="line">```C</span><br><span class="line">void KalmanFilter1::testShow(cv::Rect &amp;rectBox) &#123;</span><br><span class="line">std::cout &lt;&lt; kalmanFilter.transitionMatrix &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line">```</span><br><span class="line"></span><br><span class="line">发现是乱数据：</span><br><span class="line"></span><br><span class="line">![](https://img2020.cnblogs.com/blog/2183965/202109/2183965-20210916104603765-1437682523.png)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">最后发现原因是，cv::Mat用数组进行初始化时，拿到的是数组的指针。所以出了init()函数作用域，数组fltTransitionMatrixValues就被delete掉了。所以，如果硬是要用数组赋值的话，数组应该在整个区域都有效，则可以直接写成类属性。</span><br><span class="line"></span><br><span class="line">```C</span><br><span class="line">class KalmanFilter1 &#123;</span><br><span class="line">public:</span><br><span class="line">cv::KalmanFilter kalmanFilter;  //cv kalman filter</span><br><span class="line">float fltTransitionMatrixValues[4][4] = &#123;</span><br><span class="line">&#123;1,0,1,0&#125;,</span><br><span class="line">&#123;0,1,0,1&#125;,</span><br><span class="line">&#123;0,0,1,0&#125;,</span><br><span class="line">&#123;0,0,0,1&#125; &#125;;</span><br><span class="line">...</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">```</span><br><span class="line"></span><br><span class="line">然后，在init（）函数里才可以赋值。</span><br><span class="line"></span><br><span class="line">总结，cv::Mat用数组初始化是拿到了数组的指针，需要注意变量的作用域问题。</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>一元二次方程根怎么记住呢</title>
      <link href="/2023/09/12/%E4%B8%80%E5%85%83%E4%BA%8C%E6%AC%A1%E6%96%B9%E7%A8%8B%E6%A0%B9%E6%80%8E%E4%B9%88%E8%AE%B0%E4%BD%8F%E5%91%A2/"/>
      <url>/2023/09/12/%E4%B8%80%E5%85%83%E4%BA%8C%E6%AC%A1%E6%96%B9%E7%A8%8B%E6%A0%B9%E6%80%8E%E4%B9%88%E8%AE%B0%E4%BD%8F%E5%91%A2/</url>
      
        <content type="html"><![CDATA[<h2 id="一元二次方程根怎么记住呢"><a href="#一元二次方程根怎么记住呢" class="headerlink" title="一元二次方程根怎么记住呢"></a>一元二次方程根怎么记住呢</h2><p>判别式：<br><img src="https://img2020.cnblogs.com/blog/2183965/202109/2183965-20210921222551694-85266575.png"></p><p>方程根<br><img src="https://img2020.cnblogs.com/blog/2183965/202109/2183965-20210921222616730-2075854037.png"></p><p>以前在初中老感觉delta与方程根特别难记。常常在想到底什么开头？怎么记住呢？</p><p>因此想到了一个名字：公孙慕容复，江南的复辟大燕狂想主义者。<br>复辟 -b  ，一切都以b开始。<br>慕容复复辟(-b)大燕，乔峰伤情阿朱阿紫（2a）.<br>扫地僧判断（delta）必须两次（b的二次方）假死，才能减去四ac（看什么，就是4ac） 。额，非要说4ac，可以两个爹顿悟空门减少了“4方去挨锤”。</p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
